syntax="proto3";

package phishstoryservice;

message CreateTicketRequest{
    string         type=1;
    string         source=2;
    string         sourceDomainOrIp=3;
    string         sourceSubDomain=4;
    string         target=5;
    string         proxy=6;
    bool           intentional=7;
    string         reporter=8;
    string         info=9;
    string         infoUrl=10;

    message TicketMetadata {
        float fraud_score=1;
        string reclassified_from=2;
        string product=3;
        string username=4;
        string guid=5;
        string shopperId=6;
        string customerId=7;
    }

    TicketMetadata metadata=11;
    string         reporterEmail=12;
}

message CreateTicketResponse{
    string ticketId=1;
}

message GetTicketRequest{
    string ticketId=1;
    string reporter=2;
}

message GetTicketResponse{
    string type=1;
    bool   closed=2;
    string ticketId=3;
    string reporter=4;
    string sourceSubDomain=5;
    string sourceDomainOrIp=6;
    string target=7;
    string source=8;
    string createdAt=9;
    string closedAt=10;
}

message UpdateTicketRequest{
    string ticketId=1;
    bool   closed=2;
    string close_reason=3;
}

message UpdateTicketResponse{}

message GetTicketsRequest{
    string type=1;
    bool   closed=2;
    string sourceDomainOrIp=3;
    string target=4;
    string createdStart=5;
    string createdEnd=6;
    int32  limit=7;
    int32  offset=8;
    string reporter=9;
}

message GetTicketsResponse{
    repeated string ticketIds=1;

    message Pagination {
        int32 total=1;
        int32 limit=2;
        int32 firstOffset=3;
        int32 previousOffset=4;
        int32 nextOffset=5;
        int32 lastOffset=6;
    }

    Pagination pagination=2;
}

message CheckDuplicateRequest{
    string source=1;
}

message CheckDuplicateResponse{
    bool duplicate=1;
}

service Phishstory{
    rpc CreateTicket(CreateTicketRequest) returns(CreateTicketResponse){}
    rpc UpdateTicket(UpdateTicketRequest) returns(UpdateTicketResponse){}
    rpc GetTicket(GetTicketRequest) returns(GetTicketResponse){}
    rpc GetTickets(GetTicketsRequest) returns(GetTicketsResponse){}
    rpc CheckDuplicate(CheckDuplicateRequest) returns(CheckDuplicateResponse){}
}