syntax = "proto3";

package kelvinapimessages;

import "google/protobuf/timestamp.proto";

option go_package="pb";

message CreateTicketRequest{
    message TicketMetadata{
        int32  iris_id=1;
        string iris_reporter=2;
        string iris_created=3;
        string reclassified_from=4;
    }
    string type=1;
    string source=2;
    string sourceDomainOrIP=3;
    string reporter=4;
    string target=5;
    string proxy=6;
    string info=7;
    string reporterEmail=8;
    TicketMetadata metadata=9;
}

message CreateTicketResponse{
    string ticketID=1;
}

message GetTicketRequest{
    string ticketID=1;
    string reporter=2;
}

message GetTicketResponse{
    string ticketID=1;
    google.protobuf.Timestamp closedAt=2;
    string type=3;
    string source=4;
    string sourceDomainOrIP=5;
    string reporter=6;
    string target=7;
    bool isTicketClosed=8;
    google.protobuf.Timestamp createdAt=9;
    string ticketDuration=10;
    string internalResolution=12;
    string ticketCategory=13;
    string info=14;
    string reporterEmail=15;
}

message UpdateTicketRequest{
    string ticketID=1;
    string type=2;
    bool isTicketClosed=3;
    string target=4;
    string internalResolution=6;
    string ticketCategory=7;
}

message UpdateTicketResponse{
    string ticketID=1;
    string type=2;
    bool isTicketClosed=3;
    string target=4;
    string internalResolution=6;
    string ticketCategory=7;
}

message GetTicketsRequest{
    string type=1;
    bool isTicketClosed=2;
    string source=3;
    string sourceDomainOrIP=4;
    string target=5;
    string createdAt=6;
    string closedAt=7;
    string limit=8;
    string offset=9;
    string reporter=10;
}

message GetTicketsResponse{
    repeated string ticketIDs=1;
}

message CheckDuplicateRequest{
    string source=1;
}

message CheckDuplicateResponse{
    bool duplicate=1;
}

service KelvinAPI{
    rpc CreateTicket(CreateTicketRequest) returns(CreateTicketResponse){}
    rpc UpdateTicket(UpdateTicketRequest) returns(UpdateTicketResponse){}
    rpc GetTicket(GetTicketRequest) returns(GetTicketResponse){}
    rpc GetTickets(GetTicketsRequest) returns(GetTicketsResponse){}
    rpc CheckDuplicate(CheckDuplicateRequest) returns(CheckDuplicateResponse){}
}